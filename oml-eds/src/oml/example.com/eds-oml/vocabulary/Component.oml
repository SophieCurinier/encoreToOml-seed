vocabulary <http://example.com/eds-oml/vocabulary/Component#> as Component {

	extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs

	extends <http://example.com/eds-oml/vocabulary/Aspects#> as aspects

	extends <http://example.com/eds-oml/vocabulary/Activity#> as activity

	extends <http://example.com/eds-oml/vocabulary/StateMachine#> as stateMachine

	extends <http://example.com/eds-oml/vocabulary/Interface#> as interface
	
	extends <http://example.com/eds-oml/vocabulary/DataType#> as dataType

	@rdfs:comment "The class of component items"
	concept Component < aspects:NamedEntityType

	concept ComponentSet
	
	concept Implementation
	
	@rdfs:comment "Components are defined by a set of State Machines"
	relation entity ComponentDefinedByStateMachine [
		from Component
		to stateMachine:StateMachine
		forward definedByStateMachine
		reverse definesComponent
		functional
		inverse functional
	]

	@rdfs:comment "Components contain of a set of Activities"
	relation entity ComponentContainsActivity [
		from Component
		to activity:Activity
		forward containsActivity
		reverse isContainedByComponent
		functional
		inverse functional
	]

	@rdfs:comment "Components specify a behavioural mapping between the interfaces"
	relation entity ComponentReferencesInterface [
		from Component
		to interface:Interface
		forward referencesInterface
		reverse isInterfaceReferencedBy
		functional
		inverse functional
	]
	
	relation ComponentContainsRequiredInterfaceSet[
		from Component
		to interface:RequiredInterfaceSet
	]
	
	relation ComponentContainsDeclaredInterfaceSet[
		from Component
		to interface:DeclaredInterfaceSet
	]
	relation ComponentContainsProvidedInterfaceSet[
		from Component
		to interface:ProvidedInterfaceSet
	]
	
	relation ComponentContainsDataTypeSet[
		from Component
		to dataType:DataTypeSet
	]
	
	relation ComponentContainsImplementation[
		from Component
		to Implementation
	]
	
	relation Element[
		from ComponentSet
		to Component
	]
	
	
// TO DO
}